#BlueJ class context
comment0.target=Fabrik
comment0.text=\n\ @author\ Gruppe\ 29\n\ @version\ 3.1\ (4.\ Dezember\ 2022)\n\ <p>\n\ Die\ Klasse\ Fabrik\ bildet\ die\ Schnittstelle\ zwischen\ Kund\:innen\ und\ der\ Produktion.\n\ Sie\ nimmt\ Bestellungen\ entgegen\ und\ verwaltet\ diese.\n
comment1.params=
comment1.target=Fabrik()
comment1.text=\n\ Konstruktor\ f\u00FCr\ Objekte\ der\ Klasse\ Fabrik\:\ Hier\ werden\ die\ Instanzvariabeln\ (siehe\ oben)\ initialisiert.\n
comment2.params=args
comment2.target=void\ main(java.lang.String[])
comment2.text=\n\ Die\ Main-Methode\ erm\u00F6glicht\ den\ Einstieg\ in\ das\ Programm.\ Dabei\ werden\ eine\ Fabrik,\ ein\ GUIController\n\ und\ ein\ GUI\ instanziert.\ Dadurch\ \u00F6ffnet\ sich\ das\ Userinterface,\ auf\ welchem\ mit\ dem\ Programm\ interagiert\ werden\n\ kann.\n
comment3.params=sofa\ stuhl
comment3.target=Bestellung\ bestellungAufgeben(int,\ int)
comment3.text=\n\ Bestellung\ aufgeben.\n\n\ @param\ sofa\:\ \ Anzahl\ Sofas,\ die\ in\ einer\ Bestellung\ bestellt\ wurden.\n\ @param\ stuhl\:\ Anzahl\ St\u00FChle,\ die\ in\ einer\ Bestellung\ bestellt\ wurden.\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <p>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Anmerkung\:\ Durch\ bestellungAufgeben\ wird\ eine\ neue\ Instanz\ der\ Klasse\ Bestellung\ erstellt,\ die\ Bestellung\ best\u00E4tigt\ und\ in\ der\ Array\ "bestellungen"\ gespeichert.\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Zu\ jeder\ aufgegebenen\ Bestellung\ wird\ hier\ die\ jeweilige\ Lieferzeit\ ausgerechnet\ und\ gesetzt\ und\ die\ Bestellbest\u00E4tigung\ auf\ true\ gesetzt.\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Falls\ ein\ niedriger\ Lagerbestand\ erreicht\ wurde,\ wird\ beim\ Lieferanten\ nachbestellt,\ um\ das\ Lager\ komplett\ aufzuf\u00FCllen.\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Bei\ erfolgreicher\ Bestellabgabe\ wird\ auf\ der\ Konsole\ anschliessend\ eine\ Nachricht\ ausgespielt.\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ In\ der\ folgenden\ Methode\ wird\ zudem\ festgelegt,\ dass\ die\ Bestellung\ nur\ positive\ Werte\ enthalten\ darf\ (Keine\ Minusbestellungen,\ ansonsten\ Fehlermeldung).\n
comment4.params=zuVerarbeitendeBestellung
comment4.target=void\ bestellungVerarbeiten(Bestellung)
comment4.text=\n\ Mit\ dieser\ Methode\ werden\ die\ Bestellungen\ der\ Liste\ hinzugef\u00FCgt,\ welche\ verarbeitet\ werden\ m\u00FCssen.\n
comment5.params=
comment5.target=int\ gibBestellungsNr()
comment5.text=\n\ Mit\ dieser\ Methode\ wird\ die\ Bestellungsnummer\ wiedergegeben.\n\n\ @return\ die\ Nummer\ der\ letzten\ Bestellung,\ die\ aufgegeben\ wurde\ (\=Totale\ Anzahl\ Bestellungen\ bisher)\n
comment6.params=
comment6.target=java.util.ArrayList\ gibBestellungen()
comment6.text=\n\ Mit\ dieser\ Methode\ werden\ die\ Bestellungen\ wiedergegeben.\n\n\ @return\ ArrayListe\ bestellungen\n\ <p>\n\ Anmerkung\:\ Diese\ Methode\ dient\ den\ Unit-Tests\ im\ Rahmen\ der\ Testklasse\ FabrikTest.\n\ Sie\ gibt\ die\ Bestellungsinformationen\ f\u00FCr\ den\ Unit-Test\ zur\ Methode\ Bestellung\ auf-\ und\ ausgeben\ wieder.\n
comment7.params=
comment7.target=void\ bestellungenAusgeben()
comment7.text=\n\ Mit\ dieser\ Methode\ werden\ die\ detaillierten\ Informationen\ zu\ allen\ Bestellungen\ ausgegeben.\n\ <p>\n\ Anmerkung\:\ F\u00FCr\ jede\ Bestellung\ aus\ der\ Liste\ bestellungen,\ gibt\ die\ Konsole\ die\ unten\ programmierte\ Print-Meldung\ aus.\n\ Diese\ Methode\ gibt\ somit\ alle\ Informationen\ (Anzahl\ St\u00FChle\ /\ Anzahl\ Sofas\ /\ Bestellungen\ Total\ /\ Bestellungsnummer)\n\ f\u00FCr\ alle\ aufgegebenen\ Bestellungen\ wieder.\n
comment8.params=
comment8.target=Lager\ getLager()
comment8.text=\n\ Mit\ dieser\ Methode\ wird\ das\ Lager\ wiedergegeben.\n\n\ @return\ Lager\n\ <p>\n\ Anmerkung\:\ Diese\ Methode\ dient\ den\ Unit-Tests\ im\ Rahmen\ der\ Testklasse\ FabrikTest.\n\ Sie\ gibt\ die\ M\u00F6glichkeit,\ Methoden\ der\ Klasse\ Lager\ aufzurufen\n
numComments=9
